# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



import sys
import time

from PyQt5.QtCore import Qt, QTimer,QThread
from PyQt5.QtGui import QBrush, QColor, QPalette
from PyQt5.QtWidgets import QApplication, qApp

from qroundprogressbar import QRoundProgressBar
from threading import Timer
import threading
import time
import datetime

from PyQt5 import QtCore, QtGui, QtWidgets
from random import random

import matplotlib
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure

import random
from PyQt5.QtGui import QIcon
from loginscreen import Ui_LoginWindow
import webbrowser

#Alex imports
from time import sleep
from datetime import datetime
from ina219 import INA219
import pandas as pd
from pathlib import Path

#Marissa imports
from gpiozero import MCP3008 # Using MCP3008 ADC
from gpiozero import Servo
from gpiozero import Button, LED
from time import sleep #provides time for servo to adjust
from signal import pause

#temp/humid imports
import adafruit_dht
import board

#Ghassan imports
import os

dht = adafruit_dht.DHT22(board.D5)
stop_threads = True
topArrowRotate = False
downArrowRotate = False
rightArrowRotate = False
leftArrowRotate = False
dic = {'Time': [],
        'Voltage':[],
        'Current':[],
        'Power':[],
        }
#Marrisa code
 # Setup

# ADC channels for potentiometer and LDRs
pot = MCP3008(channel=0,differential=False,max_voltage=3.3)
LDR_NW = MCP3008(channel=2,differential=False,max_voltage=3.3) # LDR in north west position
LDR_SW = MCP3008(channel=3,differential=False,max_voltage=3.3) # LDR in south west position
LDR_NE = MCP3008(channel=4,differential=False,max_voltage=3.3) # LDR in north east position
LDR_SE = MCP3008(channel=5,differential=False,max_voltage=3.3) # LDR in south east position

# Servo

# Servo PWM:
# 1ms = -90 degrees
# 2ms = +90 degrees

# Servo was not achieving full -90 and + 90 range of motion when using GPIOZERO, so
# had to add correction factor to lower and upper range.  This was acheived
# using trial and error until the servo moved the full 180 degrees.  0.46
# was the maximum that could be used before the servo started acting
# erraticaly.

# Servo PWM:
# -90 degrees = 1ms - corrrection
# +90 degrees = 2 ms + correction

# SERVO 1
# -------------------------------------------------------------------------------------
MinPW_NS = 0.001
MaxPW_NS = 0.0025
# Create servo object using corrected pulse width
#Uses GPIO18 (pin 12 on Pi)
servo_NS = Servo("GPIO18", min_pulse_width= MinPW_NS, max_pulse_width = MaxPW_NS)
servo_NS.value = None

# SERVO 2
# -------------------------------------------------------------------------------------
MinPW_EW = 0.001
MaxPW_EW = 0.0025
# Create servo object using corrected pulse width
# Uses GPIO4 (pin 7 on Pi)
servo_EW = Servo("GPIO17", min_pulse_width = MinPW_EW , max_pulse_width = MaxPW_EW)
servo_EW.value = None

# Setup manual adjust button interrupts and manual adjust LED
btn_Auto = Button("GPIO23",pull_up = True)
btn_LeftRight = Button("GPIO25",pull_up = True)
btn_UpDown = Button("GPIO21",pull_up = True)
LEDManAdjust = LED("GPIO24")

# Program global variables
LDR_Diff = 0.5 #Allows a 0.3 difference
state = 0

class MplCanvas(FigureCanvasQTAgg):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        fig.set_facecolor('#121212')
        self.axes = fig.add_subplot(111)
        self.axes.set_facecolor('#121212')
        self.axes.tick_params(colors='white')
        for spine in self.axes.spines.values():
            spine.set_edgecolor('white')
        super(MplCanvas, self).__init__(fig)

    def clear(self):
        self.axes.cla()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        
        global stop_threads
        self.t1 = threading.Thread(target = run, args =(lambda : self,))
        self.t1.daemon = True
        self.t1.start()
        #main frame
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.setFixedSize(1060, 766)
        MainWindow.setStyleSheet("background-color: #1f1b24;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(50, 40, 500, 390))
        self.groupBox.setStyleSheet("\n"
"background-color: #121212;\n"
"border-radius:12px;\n"
"border : 0px;\n"
"")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.gridLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(19, 5, 550, 350))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(50, 460, 495, 221))
        self.groupBox_3.setStyleSheet("QGroupBox{\n"
"background-color: #121212;\n"
"border-radius:30px;\n"
"border : 0px;\n"
"\n"
"}")
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")

        #maual button creation
        self.pushButton = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton.clicked.connect(self.automaticButton)
        self.pushButton.setEnabled(True)
        self.pushButton.setGeometry(QtCore.QRect(30, 60, 131, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton{\n"
"background-color: #1f1b24;\n"
"border-radius:15px;\n"
"border-style: outset;\n"
"border-width:1px;\n"
"border-color:#915bde;\n"
"color: white;\n"
"\n"
"}\n"
"QPushButton:disabled {\n"
"color:black;\n"
"background-color: #915bde;\n"
"}")

        
        self.pushButton.setObjectName("pushButton")

        #automatic button creation
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_2.clicked.connect(self.manualButton)
        self.pushButton_2.setEnabled(False)
        self.pushButton_2.setGeometry(QtCore.QRect(30, 130, 131, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("QPushButton{\n"
"background-color: #1f1b24;\n"
"border-radius:15px;\n"
"border-style: outset;\n"
"border-width:1px;\n"
"border-color:#915bde;\n"
"color: white;\n"
"\n"
"}\n"
"QPushButton:hover{\n"

"}\n"
"QPushButton:disabled {\n"
"color:black;\n"
"background-color: #915bde;\n"
"}")
        self.pushButton_2.setObjectName("pushButton_2")
        self.toolButton = QtWidgets.QToolButton(self.groupBox_3)
        self.toolButton.pressed.connect(self.rightArrowPressed)
        self.toolButton.released.connect(self.rightArrowReleased)
        self.toolButton.setEnabled(True)
        self.toolButton.setGeometry(QtCore.QRect(390, 90, 41, 41))
        self.toolButton.setStyleSheet("QToolButton{\n"
"background-color: #1f1b24;\n"
"border-style: outset;\n"
"border-width:1px;\n"
"border-color:#915bde;\n"
"color: white;\n"
"}\n"
"QToolButton:pressed{\n"
"background-color: #1f1b24;\n"
"border-style: outset;\n"
"border-width:1px;\n"
"border-color:white;\n"
"color: white;\n"
"}\n"
"QToolButton:disabled {\n"
"background-color: #121212;\n"
"border-width:1px;\n"
"border-color:#1f1b24;\n"
"}")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("right arrow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon.addPixmap(QtGui.QPixmap("disabled arrow right.png"), QtGui.QIcon.Disabled, QtGui.QIcon.Off)
        self.toolButton.setIcon(icon)
        self.toolButton.setIconSize(QtCore.QSize(64, 64))
        self.toolButton.setObjectName("toolButton")
        self.toolButton_2 = QtWidgets.QToolButton(self.groupBox_3)
        self.toolButton_2.setEnabled(True)
        self.toolButton_2.setGeometry(QtCore.QRect(290, 90, 41, 41))
        self.toolButton_2.setStyleSheet("QToolButton{\n"
"background-color: #1f1b24;\n"
"border-style: outset;\n"
"border-width:1px;\n"
"border-color:#915bde;\n"
"color: white;\n"
"}\n"
"QToolButton:pressed{\n"
"background-color: #1f1b24;\n"
"border-style: outset;\n"
"border-width:1px;\n"
"border-color:white;\n"
"color: white;\n"
"}\n"
"QToolButton:disabled {\n"
"background-color: #121212;\n"
"border-width:1px;\n"
"border-color:#1f1b24;\n"
"}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("left arrow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon1.addPixmap(QtGui.QPixmap("disabled arrow left.png"), QtGui.QIcon.Disabled, QtGui.QIcon.Off)
        self.toolButton_2.setIcon(icon1)
        self.toolButton_2.pressed.connect(self.leftArrowPressed)
        self.toolButton_2.released.connect(self.leftArrowReleased)
        self.toolButton_2.setIconSize(QtCore.QSize(64, 64))
        self.toolButton_2.setObjectName("toolButton_2")
        self.toolButton_3 = QtWidgets.QToolButton(self.groupBox_3)
        self.toolButton_3.setEnabled(True)
        self.toolButton_3.setGeometry(QtCore.QRect(340, 30, 41, 41))
        self.toolButton_3.setStyleSheet("QToolButton{\n"
"background-color: #1f1b24;\n"
"border-style: outset;\n"
"border-width:1px;\n"
"border-color:#915bde;\n"
"color: white;\n"
"}\n"
"QToolButton:pressed{\n"
"background-color: #1f1b24;\n"
"border-style: outset;\n"
"border-width:1px;\n"
"border-color:white;\n"
"color: white;\n"
"}\n"
"QToolButton:disabled {\n"
"background-color: #121212;\n"
"border-width:1px;\n"
"border-color:#1f1b24;\n"
"}")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("top arrow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon2.addPixmap(QtGui.QPixmap("disabled arrow top.png"), QtGui.QIcon.Disabled, QtGui.QIcon.Off)
        self.toolButton_3.setIcon(icon2)
        self.toolButton_3.pressed.connect(self.topArrowPressed)
        self.toolButton_3.released.connect(self.topArrowReleased)
        self.toolButton_3.setIconSize(QtCore.QSize(64, 64))
        self.toolButton_3.setObjectName("toolButton_3")
        self.toolButton_4 = QtWidgets.QToolButton(self.groupBox_3)
        self.toolButton_4.setEnabled(True)
        self.toolButton_4.setGeometry(QtCore.QRect(340, 150, 41, 41))
        self.toolButton_4.setStyleSheet("QToolButton{\n"
"background-color: #1f1b24;\n"
"border-style: outset;\n"
"border-width:1px;\n"
"border-color:#915bde;\n"
"color: white;\n"
"}\n"
"QToolButton:pressed{\n"
"background-color: #1f1b24;\n"
"border-style: outset;\n"
"border-width:1px;\n"
"border-color:white;\n"
"color: white;\n"
"}\n"
"QToolButton:disabled {\n"
"background-color: #121212;\n"
"border-width:1px;\n"
"border-color:#1f1b24;\n"
"}")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("bottom arrow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon3.addPixmap(QtGui.QPixmap("disabled arrow bottom.png"), QtGui.QIcon.Disabled, QtGui.QIcon.Off)
        self.toolButton_4.setIcon(icon3)
        self.toolButton_4.pressed.connect(self.downArrowPressed)
        self.toolButton_4.released.connect(self.downArrowReleased)
        self.toolButton_4.setIconSize(QtCore.QSize(64, 64))
        self.toolButton_4.setObjectName("toolButton_4")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(580, 40, 450, 641))
        self.groupBox_4.setStyleSheet("\n"
"background-color: #121212;\n"
"border-radius:30px;\n"
"border : 0px;\n"
"")
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.groupBox_4)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(29, 19, 400, 601))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1060, 22))
        self.menubar.setStyleSheet("color:white;\n"
"background-color: #121212;\n"
"")
        self.menubar.setObjectName("menubar")
        self.menuCharts = QtWidgets.QMenu(self.menubar)
        self.menuCharts.setStyleSheet("color:white;")
        self.menuCharts.setObjectName("menuCharts")
        self.menuWeather = QtWidgets.QMenu(self.menubar)
        self.menuWeather.setStyleSheet("color:white;")
        self.menuWeather.setObjectName("menuWeather")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionrightarrow = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../../../../Downloads/Arrow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionrightarrow.setIcon(icon4)
        self.actionrightarrow.setObjectName("actionrightarrow")
        self.actiontop_arrow = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("../../../Pictures/top arrow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actiontop_arrow.setIcon(icon5)
        self.actiontop_arrow.setObjectName("actiontop_arrow")
        self.actionWeather = QtWidgets.QAction(MainWindow)
        self.actionWeather.triggered.connect(self.weather)
        self.actionPower_Plot = QtWidgets.QAction(MainWindow)
        self.actionPower_Plot.setObjectName("actionPower_Plot")
        self.actionPower_Plot.triggered.connect(self.latexPower)
        self.actionCurrent_Plot = QtWidgets.QAction(MainWindow)
        self.actionCurrent_Plot.setObjectName("actionCurrent_Plot")
        self.actionCurrent_Plot.triggered.connect(self.latexCurrent)
        self.actionVoltage_Plot = QtWidgets.QAction(MainWindow)
        self.actionVoltage_Plot.setObjectName("actionVoltage_Plot")
        self.actionVoltage_Plot.triggered.connect(self.latexVoltage)
        self.menuCharts.addAction(self.actionPower_Plot)
        self.menuCharts.addAction(self.actionCurrent_Plot)
        self.menuCharts.addAction(self.actionVoltage_Plot)
        self.menuWeather.addAction(self.actionWeather)
        self.menubar.addAction(self.menuCharts.menuAction())
        self.menubar.addAction(self.menuWeather.menuAction())




        #round progress bars
        self.label_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.label_2.setStyleSheet("color: white")
        self.gridLayout.addWidget(self.label_2, 0, 1, 1, 1)
        self.label_1 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_1.setObjectName("label_1")
        self.label_1.setStyleSheet("color: white")
        self.gridLayout.addWidget(self.label_1, 0, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.label_3.setStyleSheet("color: white")
        self.gridLayout.addWidget(self.label_3, 0, 2, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.label_4.setStyleSheet("color: white")
        self.gridLayout.addWidget(self.label_4, 2, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_5.setObjectName("label_5")
        self.label_5.setStyleSheet("color: white")
        self.gridLayout.addWidget(self.label_5, 2, 1, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_6.setObjectName("label_6")
        self.label_6.setStyleSheet("color: white")
        self.gridLayout.addWidget(self.label_6, 2, 2, 1, 1)




        self.progress = QRoundProgressBar()
        self.progress.setBarStyle(QRoundProgressBar.BarStyle.LINE)
        self.progress.setDecimals(1)
        self.progress.setFormat('%v')
        self.progress.setOutlinePenWidth(3)
        self.progress.setDataPenWidth(3)
        self.progress.setNullPosition(QRoundProgressBar.PositionBottom)
        self.progress.setRange(-40,40)
        self.progress.setValue(0)
         # style accordingly via palette
        palette = QPalette()
        palette.setBrush(QPalette.AlternateBase, QColor('#121212'))
        palette.setBrush(QPalette.Highlight, QColor('#d4f542'))
        palette.setColor(QPalette.Text, Qt.white)
        self.progress.setPalette(palette)
        self.gridLayout.addWidget(self.progress, 1, 0, 1, 1)

        self.progress2 = QRoundProgressBar()
        self.progress2.setBarStyle(QRoundProgressBar.BarStyle.LINE)
        self.progress2.setDecimals(1)
        self.progress2.setFormat('%v')
        self.progress2.setOutlinePenWidth(3)
        self.progress2.setDataPenWidth(3)
        self.progress2.setNullPosition(QRoundProgressBar.PositionBottom)
        gradientPoints2 = [(0, QColor('#42f554'))]
        self.progress2.setDataColors(gradientPoints2)
        self.progress2.setRange(-40,40)
        self.progress2.setValue(0)
         # style accordingly via palette
        palette2 = QPalette()
        palette2.setBrush(QPalette.AlternateBase, QColor('#121212'))
        palette2.setBrush(QPalette.Highlight, QColor('#42f5e3'))
        palette2.setColor(QPalette.Text, Qt.white)
        self.progress2.setPalette(palette2)
        self.gridLayout.addWidget(self.progress2,1, 1, 1, 1)

        self.progress3 = QRoundProgressBar()
        self.progress3.setBarStyle(QRoundProgressBar.BarStyle.LINE)
        self.progress3.setDecimals(1)
        self.progress3.setFormat('%v')
        self.progress3.setOutlinePenWidth(3)
        self.progress3.setDataPenWidth(3)
        self.progress3.setNullPosition(QRoundProgressBar.PositionBottom)
        gradientPoints3 = [(0, QColor('#426ff5'))]
        self.progress3.setDataColors(gradientPoints3)
        self.progress3.setRange(-40,40)
        self.progress3.setValue(0)
         # style accordingly via palette
        palette3 = QPalette()
        palette3.setBrush(QPalette.AlternateBase, QColor('#121212'))
        palette3.setBrush(QPalette.Highlight, QColor('#7e42f5'))
        palette3.setColor(QPalette.Text, Qt.white)
        self.progress3.setPalette(palette3)
        self.gridLayout.addWidget(self.progress3,1, 2, 1, 1)

        self.progress4 = QRoundProgressBar()
        self.progress4.setBarStyle(QRoundProgressBar.BarStyle.LINE)
        self.progress4.setDecimals(1)
        self.progress4.setFormat('%v')
        self.progress4.setOutlinePenWidth(3)
        self.progress4.setDataPenWidth(3)
        self.progress4.setNullPosition(QRoundProgressBar.PositionBottom)
        self.progress4.setRange(-40,40)
        self.progress4.setValue(0)
         # style accordingly via palette
        palette4 = QPalette()
        palette4.setBrush(QPalette.AlternateBase, QColor('#121212'))
        palette4.setBrush(QPalette.Highlight, QColor('#f542f2'))
        palette4.setColor(QPalette.Text, Qt.white)
        self.progress4.setPalette(palette4)
        self.gridLayout.addWidget(self.progress4,3, 0, 1, 1)

        self.progress5 = QRoundProgressBar()
        self.progress5.setBarStyle(QRoundProgressBar.BarStyle.LINE)
        self.progress5.setDecimals(1)
        self.progress5.setFormat('%v')
        self.progress5.setOutlinePenWidth(3)
        self.progress5.setDataPenWidth(3)
        self.progress5.setNullPosition(QRoundProgressBar.PositionBottom)
        self.progress5.setRange(0,2)
        self.progress5.setValue(0)
         # style accordingly via palette
        palette5 = QPalette()
        palette5.setBrush(QPalette.AlternateBase, QColor('#121212'))
        palette5.setBrush(QPalette.Highlight, QColor('#f5427e'))
        palette5.setColor(QPalette.Text, Qt.white)
        self.progress5.setPalette(palette5)
        self.gridLayout.addWidget(self.progress5,3, 1, 1, 1)

        self.progress6 = QRoundProgressBar()
        self.progress6.setBarStyle(QRoundProgressBar.BarStyle.LINE)
        self.progress6.setDecimals(1)
        self.progress6.setFormat('%v')
        self.progress6.setOutlinePenWidth(3)
        self.progress6.setDataPenWidth(3)
        self.progress6.setNullPosition(QRoundProgressBar.PositionBottom)
        self.progress6.setRange(0,100)
        self.progress6.setValue(0)
         # style accordingly via palette
        palette6 = QPalette()
        palette6.setBrush(QPalette.AlternateBase, QColor('#121212'))
        palette6.setBrush(QPalette.Highlight, QColor('#f57e42'))
        palette6.setColor(QPalette.Text, Qt.white)
        self.progress6.setPalette(palette6)
        self.gridLayout.addWidget(self.progress6,3, 2, 1, 1)




        #Plots
        self.canvas = MplCanvas(self, width=5, height=4, dpi=100)
        #self.canvas.setTitle("Chart 1")
        self.n_data = 0
        self.xdata = list(range(self.n_data))
        self.ydata = [random.randint(8, 12) for i in range(self.n_data)]

        self.canvas2 = MplCanvas(self, width=5, height=4, dpi=100)
        self.ydata1 = [random.randint(8, 12) for i in range(self.n_data)]
        #self.canvas2.setTitle("Chart 1")
        

        self.canvas3 = MplCanvas(self, width=5, height=4, dpi=100)
        self.ydata2 = [random.randint(8, 12) for i in range(self.n_data)]
        #self.canvas3.setTitle("Chart 1")
        
        
        self.verticalLayout.addWidget(self.canvas)
        self.verticalLayout.addWidget(self.canvas2)
        self.verticalLayout.addWidget(self.canvas3)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Timers
        self.thread = QThread()
        self.thread.start()

        
        
        self.timer = QTimer()
        self.timer.setInterval(2000)
        self.timer.timeout.connect(self.updateBar)
        self.timer.start()
        self.openLogin()

        self.timer1 = QTimer()
        self.timer1.setInterval(6000)
        self.timer1.timeout.connect(self.updatecsv)
        self.timer1.start()
        self.openLogin()

        


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Automatic"))
        self.pushButton_2.setText(_translate("MainWindow", "Manual"))
        self.toolButton.setText(_translate("MainWindow", "..."))
        self.toolButton_2.setText(_translate("MainWindow", "..."))
        self.toolButton_3.setText(_translate("MainWindow", "..."))
        self.toolButton_4.setText(_translate("MainWindow", "..."))
        self.menuCharts.setTitle(_translate("MainWindow", "Charts"))
        self.menuWeather.setTitle(_translate("MainWindow", "Weather"))
        self.actionWeather.setText(_translate("MainWindow", "External"))
        self.actionrightarrow.setText(_translate("MainWindow", "rightarrow"))
        self.actiontop_arrow.setText(_translate("MainWindow", "top arrow"))
        self.actionPower_Plot.setText(_translate("MainWindow", "Power Plot"))
        self.actionCurrent_Plot.setText(_translate("MainWindow", "Current Plot"))
        self.actionVoltage_Plot.setText(_translate("MainWindow", "Voltage Plot"))
        self.label_1.setText(_translate("MainWindow", "Power (mW)"))
        self.label_3.setText(_translate("MainWindow", "Voltage (V)"))
        self.label_2.setText(_translate("MainWindow", "Current (mA)"))
        self.label_4.setText(_translate("MainWindow", "Temperature ("+u"\u00b0"+"C)"))
        self.label_5.setText(_translate("MainWindow", "Light Intensity (%)"))
        self.label_6.setText(_translate("MainWindow", "Humidity (%)"))

    def update_plots(self):
        self.update_plot()
        self.update_plot2()
        self.update_plot3()

    def updateBar(self):
        
        ina = INA219(shunt_ohms = 0.1, max_expected_amps = 0.6, address = 0x40, busnum = 1)

        ina.configure(voltage_range = ina.RANGE_16V, gain = ina.GAIN_AUTO, bus_adc = ina.ADC_128SAMP, shunt_adc = ina.ADC_128SAMP)

        dict = {'Time': [],
        'Voltage':[],
        'Current':[],
        'Power':[],
        }

        self.v = ina.voltage()
        self.i = ina.current()
        self.p = ina.power()
        #print("\n POWER: %f \n CURRENT: %f \n VOLTAGE: %f" %(self.p, self.i, self.v))
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        dict['Time'].append(current_time)
        dict['Voltage'].append(self.v)
        dict['Current'].append(self.i)
        dict['Power'].append(self.p)
        df = pd.DataFrame(data = dict)
        df.to_csv('solar.csv', index = False)
    
        self.progress.setValue(self.p)
        self.progress2.setValue(self.i)
        self.progress3.setValue(self.v)
        try:
            temperature = dht.temperature
            humidity = dht.humidity
        except:
            print("temp/humid failed")
            try:
                temperature = dht.temperature
                humidity = dht.humidity
            except:
                temperature = dht.temperature
                humidity = dht.humidity
                print("temp/humid failed")
        self.progress4.setValue(temperature)
        global LDR_NE
        global LDR_SE
        global LDR_SW
        global LDR_NW
        average_LDR =(LDR_NE.voltage+LDR_SE.voltage+LDR_SW.voltage+LDR_NW.voltage)/4
        self.progress5.setValue(average_LDR)
        self.progress6.setValue(humidity)
        
        if(self.n_data<20):
                self.n_data+=1
                self.xdata = list(range(self.n_data))
                self.ydata = self.ydata+ [self.p]
                self.ydata1 = self.ydata1+ [self.i]
                self.ydata2 = self.ydata2+ [self.v]
        else:
                self.ydata = self.ydata[1:] + [self.p]
                self.ydata1 = self.ydata1[1:] + [self.i]
                self.ydata2 = self.ydata2[1:] + [self.v]
        self.canvas.axes.cla()  # Clear the canvas.
        self.canvas.axes.plot(self.xdata, self.ydata, '#d4f542')
        self.canvas.axes.set_title("Power Plot")
        self.canvas.axes.title.set_color('white')
        
        # Trigger the canvas to update and redraw.
        self.canvas.draw()
                
        self.canvas2.axes.cla()  # Clear the canvas.
        self.canvas2.axes.plot(self.xdata, self.ydata1, '#42f5e3')
        self.canvas2.axes.set_title("Current Plot")
        self.canvas2.axes.title.set_color('white')
        # Trigger the canvas to update and redraw.
        self.canvas2.draw()
                
        self.canvas3.axes.cla()  # Clear the canvas.
        self.canvas3.axes.plot(self.xdata, self.ydata2, '#7e42f5')
        self.canvas3.axes.set_title("Voltage Plot")
        self.canvas3.axes.title.set_color('white')
        # Trigger the canvas to update and redraw.
        self.canvas3.draw()

    

    def updatecsv(self):
        ina = INA219(shunt_ohms = 0.1, max_expected_amps = 0.6, address = 0x40, busnum = 1)

        ina.configure(voltage_range = ina.RANGE_16V, gain = ina.GAIN_AUTO, bus_adc = ina.ADC_128SAMP, shunt_adc = ina.ADC_128SAMP)
        # dict = {'Time': [],
        # 'Voltage':[],
        # 'Current':[],
        # 'Power':[],
        # }
        global dic
        print("updatecsv")
        v = ina.voltage()
        i = ina.current()
        p = ina.power()
        print("\n POWER: %f \n CURRENT: %f \n VOLTAGE: %f" %(p, i, v))
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        current_time = current_time.replace(':', '')
        current_time = current_time[0:4]
        dic['Time'].append(current_time)
        dic['Voltage'].append(v)
        dic['Current'].append(i)
        dic['Power'].append(p)
        current_date = now.strftime("%Y:%m:%d")
        current_date = current_date.replace(':', '')
        title = 'solar' + current_date + '.csv'
        df = pd.DataFrame(data = dic)
        print(title)
        if (current_time == '2359'):
            Path('/home/pi/Documents/ELEC-3907/Alex/' + title).rename('/home/pi/Documents/ELEC-3907/Alex/Database/' + title)
            print('FILE MOVED')
        df.to_csv(title, index = False)

    def automaticButton(self):
        self.pushButton.setEnabled(False)
        self.pushButton_2.setEnabled(True)
        self.toolButton.setEnabled(False)
        self.toolButton_2.setEnabled(False)
        self.toolButton_3.setEnabled(False)
        self.toolButton_4.setEnabled(False)
        global stop_threads
        stop_threads=False
        
        
  
    def manualButton(self):
        global stop_threads 
        stop_threads=True
        self.pushButton.setEnabled(True)
        self.pushButton_2.setEnabled(False)
        self.toolButton.setEnabled(True)
        self.toolButton_2.setEnabled(True)
        self.toolButton_3.setEnabled(True)
        self.toolButton_4.setEnabled(True)
        
        
        
    def topArrowPressed(self):
        global topArrowRotate
        topArrowRotate = True
        #print("["+str(datetime.datetime.now())+"] "+ "Tilt up: "+str(topArrowRotate)) 
        global servo_EW
        global servo_NS
        servo_NS.value = 0.9
        servo_EW.value = None
        

    def downArrowPressed(self):
        global downArrowRotate
        downArrowRotate = True 
        #print("["+str(datetime.datetime.now())+"] "+ "Tilt down: "+str(downArrowRotate))
        global servo_EW
        global servo_NS
        servo_NS.value = -0.9
        servo_EW.value = None
        
    def rightArrowPressed(self):
        global rightArrowRotate
        rightArrowRotate = True 
        #print("["+str(datetime.datetime.now())+"] "+ "Rotate ccw: "+str(rightArrowRotate))
        global servo_EW
        global servo_NS
        servo_NS.value = None
        servo_EW.value = 0.9
        
    
    def leftArrowPressed(self):
        global leftArrowRotate
        leftArrowRotate = True 
        #print("["+str(datetime.datetime.now())+"] "+ "Rotate cw: "+str(leftArrowRotate))
        global servo_EW
        global servo_NS
        servo_NS.value = None
        servo_EW.value = -0.9
        

    def topArrowReleased(self):
        global topArrowRotate
        topArrowRotate = False 
        #print("["+str(datetime.datetime.now())+"] "+ "Tilt up: "+str(topArrowRotate)) 
        global servo_EW
        global servo_NS
        servo_NS.value = None
        servo_EW.value = None
          

    def downArrowReleased(self):
        global downArrowRotate
        downArrowRotate = False
        #print("["+str(datetime.datetime.now())+"] "+ "Tilt down: "+str(downArrowRotate))
        global servo_EW
        global servo_NS
        servo_NS.value = None
        servo_EW.value = None

    def rightArrowReleased(self):
        global rightArrowRotate
        rightArrowRotate = False 
        #print("["+str(datetime.datetime.now())+"] "+ "Rotate ccw: "+str(rightArrowRotate))
        global servo_EW
        global servo_NS
        servo_NS.value = None
        servo_EW.value = None
    
    def leftArrowReleased(self):
        global leftArrowRotate
        leftArrowRotate = False 
        #print("["+str(datetime.datetime.now())+"] "+ "Rotate cw: "+str(leftArrowRotate))
        global servo_EW
        global servo_NS
        servo_NS.value = None
        servo_EW.value = None

    def openLogin(self):
        self.window =QtWidgets.QMainWindow()
        self.ui = Ui_LoginWindow()
        self.ui.setupUi(self.window,MainWindow)
        self.window.show()
    def weather(self):
        print("["+str(datetime.datetime.now())+"] "+ "weather")
        webbrowser.open('https://www.theweathernetwork.com/ca/weather/ontario/ottawa')

    def latexVoltage(self):
        print("run latexVoltage")
        os.system("sh /home/pi/Documents/ELEC-3907/Ghassan/voltage/voltage.sh")

    def latexCurrent(self):
        print("run latexCurrent")
        os.system("sh /home/pi/Documents/ELEC-3907/Ghassan/current/current.sh")

    def latexPower(self):
        print("run latexPower")
        os.system("sh /home/pi/Documents/ELEC-3907/Ghassan/power/power.sh")

# multi threading

def run(self):
    
        global stop_threads
        global LDR_NE
        global LDR_SE
        global LDR_SW
        global LDR_NW
        global servo_NS
        global servo_EW
        servo_NS.value = None
        servo_EW.value = None
        while True:
            count=1
            while (stop_threads):
                if(count):
                    servo_NS.value = None
                    servo_EW.value = None
                    
                    count=0
                time.sleep(1)
                
            #LEDManAdjust.off()
            # Automatic adjustment code block
            LDR_North = (LDR_NE.voltage + LDR_NW.voltage) / 2
            LDR_South = (LDR_SE.voltage + LDR_SW.voltage) / 2
            LDR_East = (LDR_NE.voltage + LDR_SE.voltage) / 2
            LDR_West = (LDR_NW.voltage + LDR_SW.voltage) / 2
       
            print(f'LDR_North: {LDR_North:.4f} LDR_South: {LDR_South:.4f} Difference: {(LDR_North - LDR_South):.4f} LDR_East: {LDR_East:.4f} LDR_West: {LDR_West:.4f} Difference: {(LDR_East - LDR_West):.4f}')           
            
            #Adjust North South Servo   
           
            if ((LDR_North - LDR_South) > LDR_Diff):
                servo_NS.value = -0.9
           
            elif ((LDR_North - LDR_South) < (-1 * LDR_Diff)):
                servo_NS.value = 0.9
       
            else:
                servo_NS.value = None
           
            #Adjust East West Servo   
           
            if ((LDR_East - LDR_West) > LDR_Diff):
                servo_EW.value = -0.9
           
            elif ((LDR_East - LDR_West) < (-1 * LDR_Diff)):
                servo_EW.value = 0.9
       
            else:
                servo_EW.value = None
                
                


                

if __name__ == "__main__":
    
    import sys
    
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    
    sys.exit(app.exec_())
