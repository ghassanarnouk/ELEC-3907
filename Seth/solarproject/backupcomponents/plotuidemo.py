# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'plotuidemo.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

from PyQt5 import QtCore, QtGui, QtWidgets
import matplotlib
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
import random
import pandas as pd

class MplCanvas(FigureCanvasQTAgg):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        fig.set_facecolor('#121212')
        self.axes = fig.add_subplot(111)
        self.axes.set_facecolor('#121212')
        self.axes.tick_params(color='white', labelcolor='white')
        
        
        for spine in self.axes.spines.values():
            spine.set_edgecolor('white')

        super(MplCanvas, self).__init__(fig)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(876, 819)
        MainWindow.setStyleSheet("background-color: #1f1b24;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(190, 50, 491, 641))
        self.groupBox_4.setStyleSheet("\n"
"background-color: #121212;\n"
"border-radius:30px;\n"
"border : 0px;\n"
"")
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.groupBox_4)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(29, 19, 441, 601))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 876, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.canvas = MplCanvas(self, width=5, height=4, dpi=100)
        self.n_data = 0
        self.xdata = list(range(self.n_data))
        self.ydata = [random.randint(8, 12) for i in range(self.n_data)]
        self.update_plot()

        self.canvas2 = MplCanvas(self, width=5, height=4, dpi=100)
        self.update_plot()

        self.canvas3 = MplCanvas(self, width=5, height=4, dpi=100)
        self.update_plot()
        
        self.verticalLayout.addWidget(self.canvas)
        self.verticalLayout.addWidget(self.canvas2)
        self.verticalLayout.addWidget(self.canvas3)


        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(500)
        self.timer.timeout.connect(self.update_plot)
        self.timer.start()

        self.timer2 = QtCore.QTimer()
        self.timer2.setInterval(500)
        self.timer2.timeout.connect(self.update_plot2)
        self.timer2.start()

        self.timer3 = QtCore.QTimer()
        self.timer3.setInterval(500)
        self.timer3.timeout.connect(self.update_plot3)
        self.timer3.start()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
    
    def update_plot(self):
        # Drop off the first y element, append a new one.
        if(self.n_data<20):
                self.n_data+=1
                self.xdata = list(range(self.n_data))
                self.ydata = self.ydata+ [random.randint(8, 12)]
        else:
                self.ydata = self.ydata[1:] + [random.randint(8, 12)]
        self.canvas.axes.cla()  # Clear the canvas.
        self.canvas.axes.set_yticks([2,4,6,8,10,12],[2,4,6,8,10,12])
        self.canvas.axes.plot(self.xdata, self.ydata, '#d4f542')
        # Trigger the canvas to update and redraw.
        self.canvas.draw()
    
    def update_plot2(self):
        # Drop off the first y element, append a new one.
        if(self.n_data<20):
                self.n_data+=1
                self.xdata = list(range(self.n_data))
                self.ydata = self.ydata+ [random.randint(8, 12)]
        else:
                self.ydata = self.ydata[1:] + [random.randint(8, 12)]
        self.canvas2.axes.cla()  # Clear the canvas.

        self.canvas2.axes.plot(self.xdata, self.ydata, '#42f5e3')
        # Trigger the canvas to update and redraw.
        self.canvas2.draw()
    
    def update_plot3(self):
        # Drop off the first y element, append a new one.
        if(self.n_data<20):
                self.n_data+=1
                self.xdata = list(range(self.n_data))
                self.ydata = self.ydata+ [random.randint(8, 12)]
        else:
                self.ydata = self.ydata[1:] + [random.randint(8, 12)]
        self.canvas3.axes.cla()  # Clear the canvas.
        self.canvas3.axes.plot(self.xdata, self.ydata, '#7e42f5')
        # Trigger the canvas to update and redraw.
        self.canvas3.draw()

    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
